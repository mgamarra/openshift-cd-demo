apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
      "DeploymentConfig"}]'
  creationTimestamp: null
  labels:
    app: cicd-pipeline
    group: cicd
    name: cicd-pipeline
    template: cicd
  name: gitlab-pipeline
  selfLink: /apis/build.openshift.io/v1/namespaces/citinova-devops-tools/buildconfigs/gitlab-pipeline
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      env:
      - name: DEV_PROJECT
        value: citinova-test-openshift-dev
      - name: STAGE_PROJECT
        value: citinova-test-openshift-hom
      - name: ENABLE_QUAY
        value: "false"
      - name: CREDENTIALS_ID
        value: gitlabsecret
      jenkinsfile: |-
        def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

        pipeline {
          agent {
            label 'maven'
          }
          stages {
            stage('Build App') {
              steps {
                    git branch: 'master', url: 'https://gitlab.com/citinovadev/test-openshift.git', credentialsId: 'citinova-devops-tools-gitlabsecret'
                    sh "${mvnCmd} install -DskipTests=true"
              }
            }
            stage('Test') {
              steps {
                sh "${mvnCmd} test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
            }
            stage('Code Analysis') {
              steps {
                script {
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                }
              }
            }
            stage('Archive App') {
              steps {
                sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
              }
            }
            stage('Build Image') {
              steps {
                sh "cp target/teste1.war target/ROOT.war"
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "tasks").startBuild("--from-file=target/ROOT.war", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Deploy DEV') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
            stage('Promote to STAGE?') {
              agent {
                label 'skopeo'
              }
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }

                script {
                  openshift.withCluster() {
                    if (env.ENABLE_QUAY.toBoolean()) {
                      withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                        sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
                      }
                    } else {
                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
                    }
                  }
                }
              }
            }
            stage('Deploy STAGE') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.STAGE_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
  - github:
      secret: WMsv6ndV
    type: GitHub
  - generic:
      secret: WMsv6ndV
    type: Generic
status:
  lastVersion: 44
